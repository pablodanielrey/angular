
'.source.python':
  'wamp register method':
    'prefix': 'wrm'
    'body': "yield from self.register(self.$1:, '$2:')"
    

'.source.python':
  'wamp server method':
    'prefix': 'wsm'
    'body': """
      def $1:(self,param1):
          con = self._getDatabase()
          try:
              ''' .... codigo aca ... '''
              con.commit()
              return True

          finally:
              con.close()

      @coroutine
      def $2:_async(self,param1):
          loop = asyncio.get_event_loop()
          r = yield from loop.run_in_executor(None,self.$1:,param1)
          return r
    """


'.source.python':
  'wamp server python':
    'prefix': 'wsp'
    'body': """
      # -*- coding: utf-8 -*-
      import inject, logging
      import psycopg2

      import asyncio
      from asyncio import coroutine
      from autobahn.asyncio.wamp import ApplicationSession

      from model.config import Config

      class $1:(ApplicationSession):

          def __init__(self,config=None):
              logging.debug('instanciando')
              ApplicationSession.__init__(self, config)

              self.serverConfig = inject.instance(Config)

          @coroutine
          def onJoin(self, details):
              logging.debug('registering methods')
              ''' yield from self.register(self.method_name, 'registered.method.name') '''

          def _getDatabase(self):
              host = self.serverConfig.configs['database_host']
              dbname = self.serverConfig.configs['database_database']
              user = self.serverConfig.configs['database_user']
              passw = self.serverConfig.configs['database_password']
              return psycopg2.connect(host=host, dbname=dbname, user=user, password=passw)

          def methodName(self,param1):
              con = self._getDatabase()
              try:
                  ''' .... codigo aca ... '''
                  con.commit()
                  return True

              finally:
                  con.close()

          @coroutine
          def methodName_async(self,param1):
              loop = asyncio.get_event_loop()
              r = yield from loop.run_in_executor(None,self.methodName,param1)
              return r
    """
