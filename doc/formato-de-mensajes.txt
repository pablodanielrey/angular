
/*******************
/********** ASISTENCIA ***********


query :
{
  id:,
  action:"getFailsByFilter",
  session:,
  request:{
      filter: {
                failType:"es el valor que posee las fallas en la description (f.description)",
                count:"cantidad",
                minutes:"diferencia en minutos",
                periodicity:'Semanal|Mensual|Anual', "si es null no tiene que incluir la periodicidad"
                hoursOperator:">|<|=",
                begin: "fecha de inicio",
                end: "fecha de fin"
              }
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{[
      user: 'datos del usuario ',
      fail: "datos correspondiente a la falla"
  ]}

}


query :
{
  id:,
  action:"getFailsByDate",
  session:,
  request:{
      start: "fecha de inicio"
      end: 'fecha de fin'
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{[
      user: 'datos del usuario ',
      fail: "datos correspondiente a la falla"
  ]}

}



query :
{
  id:,
  action:'getAssistanceLogs',
  session:,
  request:{
    user_id:'id del usuario'
    from: 'fecha en ISO 8601 con info utc, YYYY-MM-DDTHH:MM:SS+HH:MM',
    to: 'fecha en ISO 8601 con info utc, YYYY-MM-DDTHH:MM:SS+HH:MM'
  }
}

response:
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
    logs: [
      {
        id:'id del log',
        log: 'fecha en ISO 8601 con info utc, YYYY-MM-DDTHH:MM:SS+HH:MM',
        verifymode: n,
        deviceId: 'id del dispositivo',
        userId: 'id del usuario'
      }
    ]
  }
}


------

retorna los usuarios que pertenecen a las oficinas y suboficinas en las cuales la persona userId tiene un rol determinado

query:
{
  id:
  action:'getUserInOfficesByRole'
  session:
  request: {
    userId: id del usuario que tiene los roles en las oficinas -- opcional,. si no va se toma el usuario actual de la session
    role: rol a buscar
    tree: False|True -- retorna el arbol o solo las oficinas directas que tienen el rol.
  }
}

response:
{
  id:
  ok:
  error:
  response: {
    users: [
        userId: 'id del usuario'
    ]
  }
}


-----------

obtiene todos los roles que tiene un usuario dentro de una oficina

query:
{
  id:
  action:'getUserOfficeRoles'
  session:
  request: {
    officeId: 'id de la oficina' -- opcional, en el caso de no existir obtiene todos los roles que tenga en las oficinas
  }
}

response:
{
  id:
  ok:
  error:
  response: {
    roles: [
      {
        officeId: 'id de la oficina',
        role: 'rol en la oficina'
      }
    ]
  }
}



-------

query :
{
  id:,
  action:"getAssistanceStatus",
  session:,
  request:{
      user_id: "id del usuario",
      date: "fecha a buscar"
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
      userId: id del usuario consultado,
      status: 'estado del agente',
      start: "fecha y hora de inicio para el dia actual",
      end: "fecha y hora fin para el dia actual",
      logs: [ date1, date2, date3, .... ]       // son todas las marcaciones en bruto del dia actual
      workedMinutes: 'minutos trabajados dentro del dia actual'
  }
}

-------

query :
{
  id:,
  action:"getAssistanceStatusByUsers",
  session:,
  request:{
      usersIds: "listado de ids de los usuarios a buscar",
      dates: "fechas a buscar"
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{[
      userId: id del usuario consultado,
      status: 'estado del agente',
      start: "fecha y hora de inicio para el dia actual",
      end: "fecha y hora fin para el dia actual",
      logs: [ date1, date2, date3, .... ]       // son todas las marcaciones en bruto del dia actual
      workedMinutes: 'minutos trabajados dentro del dia actual'
  ]}
}

-----

query :
{
  id:,
  action:"getAssistanceData",
  session:,
  request:{
      user_id: "id del usuario"
      date: "fecha a consultar" -- en caso de que no exista consulta el día actual.
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
      userId: id del usuario consultado
      position: 'cargo de la persona',
  	  schedule:[
    		{
    	      start: "fecha y hora de inicio del turno",
    		    end: "fecha y hora de fin de turno"
    		}
  	  ]
  }

}



-----------
obtiene todas las oficinas de un usuario.

query :
{
  id:,
  action:"getOffices",
  session:,
  request:{
      user_id: "id del usuario" -- opcional. si no existe entonces retorna todas las oficinas.
      tree: "False|True" -- retorna todo el arbol de las oficinas hijas a las que pertenece el usuario - Opcional
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
    offices: [
      {
        id: 'id de la oficina',
        name: 'nombre de la oficina'
        parent: 'id de la oficina padre' -- en el caso de que exista
      }
    ]
  }

}

---------------


query :
{
  id:,
  action:"getJustifications",
  session:,
  request:{
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
    justifications: [
      {
        id: 'id de la justificacion',
        name: 'nombre de la justificacion'
      }
    ]
  }

}


---------------------------------------------

---- justificaciones posibles de tomarse ------

query :
{
  id:,
  action:"getJustificationStock",
  session:,
  request:{
      user_id: "id del usuario",
      justification_id: "id de la justificación"
      date: "fecha en la cual es calculada la consulta"
      period: "WEEK|MONTH|YEAR" -- período en el cual se analiza el stock disponible. -- opcional. si no se lo especifica toma el mínimo
  }
}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
    justificationId: 'id de la justificacion'
    stock: "cantidad de justificaciones disponibles de ese tipo"
  }
}




---------------


query : Obtener todas las solicitudes de justificationces
{
  id:,
  action:"getJustificationRequests",
  session:,
  request:{
      status: 'estado de la justificacion PENDING|APPROVED|REJECTED|CANCELED' -- si no existe se obtienen todas,
  }
}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
    requests : [ "lista de solicitudes de un determinado usuario"
  		{
        id: "id de la solicitud de justificacion",
        user_id:"id del usuario",
    		justification_id: "id de la justificacion o licencia solicitada"
    		begin: 2014-12-01 00:00:00 "fecha de inicio de la justificacion o licencia solicitada"
    		end: 2014-12-02 00:00:00 "fecha de finalizacion de la justificacion o licencia solicitada"
    		status: "PENDING|APPROVED|REJECTED|CANCELED"
  		}
	]

}

------------------------------
"""
query : Obtener todas las solicitudes de justificationces
{
  id:,
  action:"getJustificationRequestsByDate",
  session:,
  request:{
      status: 'estado de la justificacion PENDING|APPROVED|REJECTED|CANCELED' -- si no existe se obtienen todas,
      start: 'fecha de inicio de la busqueda'
      end: 'fecha limite de busqueda'
      usersIds: ids de los usuarios a buscar
  }
}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
    requests : [ "lista de solicitudes de un determinado usuario"
  		{
        id: "id de la solicitud de justificacion",
        user_id:"id del usuario",
    		justification_id: "id de la justificacion o licencia solicitada"
    		begin: 2014-12-01 00:00:00 "fecha de inicio de la justificacion o licencia solicitada"
    		end: 2014-12-02 00:00:00 "fecha de finalizacion de la justificacion o licencia solicitada"
    		status: "PENDING|APPROVED|REJECTED|CANCELED"
  		}
	]

}
"""

------------


query : Obtener todas las solicitudes de justificationces que puede administrar
{
  id:,
  action:"getJustificationRequestsToManage",
  session:,
  request:{
      status: 'estado de la justificacion PENDING|APPROVED|REJECTED|CANCELED' -- si no existe se obtienen todas,
      group: "ROOT|TREE" -- si no existe obtiene las de los grupos directos que maneja. sin los subgrupos.
  }
}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
    requests : [ "lista de solicitudes de un determinado usuario"
      {
        id: "id de la solicitud de justificacion",
        user_id:"id del usuario",
        justification_id: "id de la justificacion o licencia solicitada"
        begin: 2014-12-01 00:00:00 "fecha de inicio de la justificacion o licencia solicitada"
        end: 2014-12-02 00:00:00 "fecha de finalizacion de la justificacion o licencia solicitada"
        status: "PENDING|APPROVED|REJECTED|CANCELED"
      }
  ]

}




---------------


query : solicitud de justificaciones de un determinado usuario
{
  id:,
  action:"requestJustification",
  session:,
  request:{
      user_id: "id del usuario",
      justification_id: "id de la justificacion o licencia solicitada"
  	  begin: "fecha de inicio de la justificacion o licencia solicitada"
  	  end: "fecha de finalizacion de la justificacion o licencia solicitada" -- si no viene en el mensaje se toma hasta el fin de turno
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor"
}


eventos :
JustificationsRequestsUpdatedEvent
{
  justification_id
  user_id
}

JustificationStatusChangedEvent
{
  request_id
}

JustificationStockChangedEvent
{
  justification_id
  user_id
}


---------------


query : solicitud de justificaciones de un determionado usuario
{
  id:,
  action:"updateJustificationRequestStatus",
  session:,
  request:{
      request_id: "id del pedido",
      status: "PENDING|APPROVED|REJECTED|CANCELED"
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor"
}


---------------


query : solicitud de horas extra de un determinado usuario
{
  id:,
  action:"requestOvertime",
  session:,
  request:{
      user_id: "id del usuario al cual se le solicita el tiempo extra",
  	  begin: "timestamp de inicio del tiempo extra"
  	  end: "timestamp de fin del tiempo extra"
  	  reason: "motivo de solicitud del tiempo extra"
  }
}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor"
}

eventos :

OvertimesUpdatedEvent
{
  overtime_id
  user_id               // id del usuarioque va a hacer las hroas extras
  requestor_id          // id del jefe que requiere las horas extras
}


OvertimeStatusChangedEvent
{
  overtime_id
  user_id           // id del usuario que cambia el estado del overtime
  requestor_id      // id del usuario (jefe) que solicito la hora extra
  original_id       // id del usuario destino de las horas extras
}


---------------


query : Obtener todas las solicitudes de horas extras solicituadas por un determinado usuario
{
  id:,
  action:"getOvertimeRequests",
  session:,
  request:{
      status: 'estado de la justificacion PENDING|APPROVED|REJECTED|CANCELED' -- si no existe se obtienen todas,
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
    requests : [ "lista de solicitudes"
  		{
	      id: "id de la solicitud de hora extra",
        user_id:"id del usuario para el cual se solicito hora extra",
        requestor_id: "id del que solicito el pedido"
    		begin: 2014-12-01 00:00:00 "fecha y hora de inicio de la hora extra"
    		end: 2014-12-02 00:00:00 "fecha y hora de finalizacion de la hora extra"
    		reason: "motivo de la solicitud"
    		status: "PENDING|APPROVED|REJECTED|CANCELED (estado de la solicitud)"
  		}
	]

}


---------------------------


query : Obtener todas las solicitudes de horas extras solicituadas por un determinado usuario
{
  id:,
  action:"getOvertimeRequestsToManage",
  session:,
  request:{
      status: 'estado de la justificacion PENDING|APPROVED|REJECTED|CANCELED' -- si no existe se obtienen todas,
      group: "ROOT|TREE" -- si no existe obtiene solo las del usuario, y no las del grupo
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor",
  response:{
    requests : [ "lista de solicitudes"
      {
        id: "id de la solicitud de hora extra",
        user_id:"id del usuario para el cual se solicito hora extra",
        requestor_id: 'id del usuario que solicita las horas extras'
        begin: 2014-12-01 00:00:00 "fecha y hora de inicio de la hora extra"
        end: 2014-12-02 00:00:00 "fecha y hora de finalizacion de la hora extra"
        reason: "motivo de la solicitud"
        status: "PENDING|APPROVED|REJECTED|CANCELED (estado de la solicitud)"
      }
  ]

}

-------------


query : actualizar estado de una solicitud de hora extra
{
  id:,
  action:"updateRequestOvertimeStatus",
  session:,
  request:{
      requestId: "id del pedido",
      status: "PENDING|APPROVED|REJECTED|CANCELED"
  }

}

response :
{
  id: "id de la petición",
  ok: "caso exito",
  error: "error del servidor"
}


---------------


/****************************************************************/
/******************** INSERION LABORAL **************************/
/****************************************************************/

/////////////////////////////////////////////////////////////////
                           CARRERA
/////////////////////////////////////////////////////////////////

createDegreesData ->  elimina todas las carreras del usuario (user_id)
                      y agrega las carreras que se pasan como parametro

peticion:
{
    "id":"id de la peticion",
    "action":"createDegreesData",
    "session":"session de usuario",
    "user_id":"id del usuario dueño de las carreras"
    "degree": [
            {
            'id':'id de la carrera',
            'user_id':'id del usuario',
            'name':'nombre de la carrera',
            'curses':'materias aprobadas',
            'average1':'promedio con aplazo',
            'average2':'promedio sin aplazo',
            'work_type': 'lista de tipos de trabajos solicitados'
            }
    ]
}

respuesta:
{
    "id":"id de la peticion",
    "ok":"",
    "error":""
}



findDegree-> busca una carrera

peticion:
{
    "id":"",
    "action":"findDegree"
    "session":"sesion de usuario"
    "degree":{
        "id":"id de la carrera"
    }
}

respuesta:
{
    "id":"id de la peticion",

    "degree": {
            'id':'id de la carrera',
            'user_id':'id del usuario',
            'name':'nombre de la carrera',
            'curses':'materias aprobadas',
            'average1':'promedio con aplazo',
            'average2':'promedio sin aplazo',
            'work_type': 'lista de tipos de trabajos solicitados'
    }
    "ok":""
    "error":""
}



listDegrees-> obtiene todas las carreras del usuario user_id

peticion:
{
    "id":"",
    "action":"listDegrees"
    "session":"sesion de usuario"
    'user_id':"id de usuario"
}

respuesta:
{
    "id":"id de la peticion",

    "degree": [
            {
            'id':'id de la carrera',
            'user_id':'id del usuario',
            'name':'nombre de la carrera',
            'curses':'materias aprobadas',
            'average1':'promedio con aplazo',
            'average2':'promedio sin aplazo',
            'work_type': 'lista de tipos de trabajos solicitados'
            }
    ]
    "ok":""
    "error":""
}



/////////////////////////////////////////////////////////////////
                           IDIOMAS
/////////////////////////////////////////////////////////////////

createLanguagesData ->  elimina todos los idiomas del usuario (user_id)
                      y agrega los idiomas que se pasan como parametro

peticion:
{
    "id":"id de la peticion",
    "action":"createLanguagesData",
    "session":"session de usuario",
    "user_id":"id del usuario"
    "language": [
            {
            "id":"id del idioma a actualizar",
            "user_id":"id del usuario",
            "name":"nombre del idioma",
            "level":"nivel"
            }
    ]
}

respuesta:
{
    "id":"id de la peticion",
    "ok":"",
    "error":""
}




listLanguageData-> obtiene una lista de todos los idiomas que posee el usuario

peticion:
{
    "id":"",
    "action":"listLanguageData"
    "session":"sesion de usuario"
    "user_id":"id del usuario del cual se necesitan sus idiomas"
}

respuesta:
{
    "id":"id de la peticion",
    "languages":[
        {
        "id":"id del idioma a actualizar",
        "user_id":"id del usuario",
        "name":"nombre del idioma",
        "level":"nivel"
        }
    ],
    "ok":""
    "error":""
}



findLanguage-> busca un idioma

peticion:
{
    "id":"",
    "action":"findLanguage"
    "session":"sesion de usuario"
    "language":{
        "id":"id del idioma"
    }
}

respuesta:
{
    "id":"id de la peticion",
    "language":[
        {
        "id":"id del idioma a actualizar",
        "user_id":"id del usuario",
        "name":"nombre del idioma",
        "level":"nivel"
        }
    ],
    "ok":""
    "error":""
}



/////////////////////////////////////////////////////////////////
                      DATOS DEL USUARIO
/////////////////////////////////////////////////////////////////


findLaboralInsertion-> busca loo datos personales de insercion laboral

peticion:
{
    "id":"",
    "action":"findLaboralInsertion"
    "session":"sesion de usuario"
    "laboralInsertion":{
        "id":"id de insercion laboral"
    }
}

respuesta:
{
    "id":"id de la peticion",
    "laboralInsertion":[
        {
        "id":"id del usuario a agregar la info de insercion laboral",
        "cv":"curriculum vitae del usario",
        "residir":"si esta dispuesto a residir en otro lugar,
        "viajar":"si esta dispuesto a viajar"
        }
    ],
    "ok":""
    "error":""
}



persistLaboralInsertionData-> actualiza los datos

peticion:
{
    "id":"",
    "action":"persistLaboralInsertionData",
    "session":"session de usuario",
    "laboralInsertion": {
        "id":"id del usuario a agregar la info de insercion laboral",
        "cv":"curriculum vitae del usario",
        "reside":"si esta dispuesto a residir en otro lugar,
        "travel":"si esta dispuesto a viajar"
    }
}

respuesta:
{
    "id":"id de la peticion",
    "ok":"",
    "error":""
}
